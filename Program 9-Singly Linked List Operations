# DS-Lab-Programs
All the programs I did in our Data Structures Lab in 3rd Semester

#Singly Linked List Operations

#include<stdio.h>
#include<stdlib.h>

struct student
{
	char usn[30];
	char name[50];
	char branch[20];
	int sem;
	long int phno;
	struct student *link;
};

typedef struct student *Student;

Student start = NULL;

Student create()
{
	Student getnode;
	getnode = (Student)malloc(sizeof(struct student));
	
	if(getnode == NULL)
	{ 	printf("\nMemory could not be allocated!");
		return 0;
	}
	
	printf("\nEnter the details of Student: ");
	printf("\nEnter the USN: ");
	scanf("%s", getnode->usn);
	
	printf("\nEnter the name: ");
	scanf("%s", getnode->name);
	
	printf("\nEnter the branch: ");
	scanf("%s", getnode->branch);
	
	printf("\nEnter the sem: ");
	scanf("%d", &getnode->sem);
	
	printf("\nEnter the phno: ");
	scanf("%ld", &getnode->phno);
	
	getnode->link = NULL;
	
	return(getnode);
}

void insert_front()
{
	Student node;
	node = create();
	
	if(start == NULL)
	{
		start = node;
	}
	else
	{
		node->link = start;
		start = node;
	}
}

void delete_front()
{
	Student temp;
	
	if(start == NULL)
	{
		printf("\nList is empty");
	}
	else
	{
		temp = start;
		start = temp->link;
		printf("\nThe deleted stduent USN is %s", temp->usn);
		free(temp);
	}
}

void create_list()
{
	int i, n;
	printf("\nEnter the number of students: ");
	scanf("%d", &n);
	
	for(i=0; i<n; i++)
	{
		insert_front();
	}
}

void status()
{
	Student temp;
	int count = 0;
	if(start == NULL)
	{
		printf("\nList is empty!");
		return;
	}
	
	temp = start;
	printf("\nThe Student Details are: ");
	while(temp!=NULL)
	{
		printf("\n%s", temp->usn);
		printf("\n%s", temp->name);
		printf("\n%s", temp->branch);
		printf("\n%d", temp->sem);
		printf("\n%ld", temp->phno);
		temp = temp->link;
		count++;
	}
	printf("\nThe number of nodes are: %d", count);
}

void insert_end()
{
	Student node, temp;
	node = create();
	if(start == NULL)
	{
		start = node;
	}
	else
	{
		temp = start;
		while(temp->link != NULL)
		{
			temp = temp->link;
		}
		temp->link = node;
	}
}

void delete_end()
{
	Student temp, prev;
	temp = start;
	if(temp == NULL)
	{
		printf("\nList is empty!");
	}
	else if(temp->link == NULL)
	{
		printf("\nThe deleted student USN is %s", temp->usn);
		free(temp);
		start = NULL;
	}
	else
	{
		while(temp->link!=NULL)
		{
			prev = temp;
			temp = temp->link;
		}
		printf("\nthe deleted student USN is %s", temp->usn);
		free(temp);
		prev->link = NULL;
	}
}

int main()
{
	int ch;
	for( ; ; )
	{
		printf("\n--------------------------------");
		printf("\nSINGLY LINKED LIST OPERATIONS");
		printf("\n1: Create list");
		printf("\n2: Status of list");
		printf("\n3: Insert End");
		printf("\n4: Delete End");
		printf("\n5: Insert Front");
		printf("\n6: Delete Front");
		printf("\n7: Exit");
		printf("\n--------------------------------");
		
		printf("\nEnter your choice: ");
		scanf("%d", &ch);
		
		switch(ch)
		{
			case 1:
				create_list();
				break;
			case 2:
				status();
				break;
			case 3: 
				insert_end();
				break;
			case 4:
				delete_end();
				break;
			case 5:
				insert_front();
				break;
			case 6:
				delete_front();
				break;
			case 7:
				return 0;
			default:
				printf("\nInvalid Choice!");
		}
	}
	return 0;
}

		
